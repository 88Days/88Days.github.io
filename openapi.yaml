openapi: 3.0.1
info:
  title: 88 Days API
  description: '<h2>Authorizations</h2> <p>Access to the API is managed using Authorisation headers</p> <p><strong>Development URL:</strong></p> <blockquote> <p><code>http://api.88-days.com:8000/dev/</code></p> </blockquote> <p><strong>Production URL:</strong></p> <blockquote> <p><code>http://api.88-days.com:2000/v1/</code></p> </blockquote> <p><strong>Login</strong></p> <p>Use Firebase to login user<br>- Email<br>- Phone number</p> <p><a href=https://firebase.google.com/docs>Firebase Documentation</a></p> <p><strong>UID</strong></p> <p>User Identification code is created when signing in with firebase. This is then used to create an user in the 88 Days database and used to get full details</p> <p><strong>Username</strong></p> <p>Is created when making user.<br>- Cannot be changed<br>- Unique</p> <p>&nbsp;</p>'
  contact:
    email: info@88-days.com
  version: 1.0.0
servers:
  - url: 'http://88-days.com:2000/v1'
    description: Production
  - url: 'http://88-days.com:8000/dev'
    description: Development
tags:
  - name: General
  - name: User
  - name: Search
  - name: Feed
  - name: Map places
paths:
  /user/create:
    post:
      tags:
        - User
      summary: Create a new user
      operationId: create new user
      requestBody:
        description: New user
        content:
          application/json:
            schema:
              required:
                - uid
                - name
                - username
                - pictureID
                - country
              type: object
              properties:
                uid:
                  type: string
                  example: fdsaHhJHfd8742GFSYF0fdsh
                name:
                  type: string
                  example: Willem de Vries
                username:
                  type: string
                  example: willemjan08
                email:
                  type: string
                  example: willemjan@gmail.com (optional)
                phone:
                  type: string
                  example: 4.40837162E8 (optional)
                country:
                  type: string
                  example: NL
      responses:
        '200':
          description: Could not create User
          content:
            application/json:
              schema:
                type: string
                example: Username already in use
        '201':
          description: User Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      x-codegen-request-body-name: body
  /user/update:
    post:
      tags:
        - User
      summary: Update user info
      description: Updates the current info for user **Provide at least one value in body**
      operationId: update User
      requestBody:
        description: Values to update
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Willem jan
                bio:
                  type: string
                  example: This is my new bio
                token:
                  type: string
                  example: GdTasGdfysa5432Kvcyderw
                country:
                  type: string
                  example: NL
        required: false
      responses:
        '200':
          description: Updated user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found for UID
          content: {}
        '405':
          description: Validation exception empty body
          content: {}
      x-codegen-request-body-name: body
  /user/exists:
    get:
      tags:
        - User
      summary: Check if user exists for given UID
      responses:
        '200':
          description: OK
          content:
            application/json:
              example:
                exists: true
  '/user/get/{UID}':
    get:
      tags:
        - User
      summary: Get user for given UID
      parameters:
        - name: UID
          in: path
          description: User identification number of requested user
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content: {}
  /user/getMe:
    get:
      tags:
        - User
      summary: Get logged in user
      description: <strong>Note</strong>  When retrieving user the value friendshipStatus will not be returned in this call
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content: {}
  '/search/users/{searchterm}':
    get:
      tags:
        - Search
      parameters:
        - name: searchterm
          in: path
          description: name or username
          required: true
          schema:
            type: string
      summary: Search for users
      description: Returns a list of smallUsers for given searchterm.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SmallUser'
        '404':
          description: Could not find any users
          content: {}
  /suggested/users:
    get:
      tags:
        - Search
      summary: Get suggested users
      description: Returns a list of 5 newest users and 5 other users
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  latest:
                    type: array
                    items:
                      $ref: '#/components/schemas/SmallUser'
                  random:
                    type: array
                    items:
                      $ref: '#/components/schemas/SmallUser'
        '404':
          description: Could not find any users
          content: {}
  /mapPlaces:
    get:
      tags:
        - Map places
      summary: Get all map places
      description: Returns an array of all map places
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MapPlace'
        '405':
          description: Could not retrieve places
          content: {}
components:
  schemas:
    Error:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string
    MapPlace:
      type: object
      properties:
        name:
          type: string
          example: bundaberg backpackers
        id:
          type: string
          example: fdshOHSfsdoafasLkfs
        type:
          enum:
            - working_hostel
            - workplace
            - hostel
          example: workplace
        adress:
          type: string
          example: '432 Brunswickstreet, QLD Australia'
        pictures:
          type: array
          items:
            type: string
          example:
            - fdsafh
            - KLJDfhsaif
        phone:
          type: string
          example: 0448920149
        latitude:
          type: number
          example: 123.3291844
        longitude:
          type: number
          example: 89.32948013
        ratingCount:
          type: integer
          example: 32
        ratingTotal:
          type: number
          example: 34.84
        bookingURL:
          type: string
        websiteURL:
          type: string
    SmallUser:
      type: object
      properties:
        name:
          type: string
          example: willem hendriks
        username:
          type: string
          example: willempie88
        uid:
          type: string
          example: hfdaorewfioyhoHUJKgyeworjso9as
        friendshipState:
          enum:
            - 0
            - 1
            - 2
            - 3
          example: 0
          description: |2

              * `0` - NONE (users have no relation)
              
              * `1` - OUTGOING (you are following this user)
              
              * `2` - INCOMING (user is following you)
              
              * `3` - MUTUAL (you follow each other)
    User:
      type: object
      properties:
        uid:
          type: string
          example: Jfdksofhs432ujf08Hf83n9fdsMh
        name:
          type: string
          example: Willem de vries
        username:
          type: string
          example: willemdevries08
        email:
          type: string
          example: willemdevries@gmail.com
        phone:
          type: string
          example: 0440763928E8
        bio:
          type: string
          example: This is an example biography
          default: ''
        lastOnline:
          type: string
          format: date-time
          example: '2019-12-27T12:14:42Z'
        country:
          type: string
          example: NL
        signupDate:
          type: string
          description: Generated when user is created
          format: date-time
          example: '2019-12-27T12:14:42Z'
        num_days:
          type: integer
          description: Number of days left for user to work
          example: 64
        followers:
          type: array
          example:
            - fjdsajfidshfj43hHJFYUDS
            - FDJS7432jdfgFfdsj9JhfdhskJ
          items:
            type: string
        following:
          type: array
          example:
            - fjdsajfidshfj43hHJFYUDS
            - FDJS7432jdfgFfdsj9JhfdhskJ
          items:
            type: string
        friendshipState:
          enum:
            - 0
            - 1
            - 2
            - 3
          example: 0
          description: |2

              * `0` - NONE (users have no relation)
              
              * `1` - OUTGOING (you are following this user)
              
              * `2` - INCOMING (user is following you)
              
              * `3` - MUTUAL (you follow each other)
        token:
          type: string
          example: Jjfdsh7r3284bjfsy?r289<gds9f203f
    Users:
      type: array
      items:
        $ref: '#/components/schemas/User'
