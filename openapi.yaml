openapi: 3.0.1
info:
  title: 88 Days API
  description: '<h2>Authorizations</h2> <p>Access to the API is managed using an <strong>API key</strong> which is unique for each platform that must be appended as an in-query parameter to every call made to the API.</p> <p><strong>Example:</strong></p> <blockquote> <p><code>http://51.68.191.51:2000/v1/user/create?apiKey={{api-key}}</code></p> </blockquote> <p><strong>Login</strong></p> <p>Done with firebase.<br>- Email<br>- Phone number</p> <p><strong>UID</strong></p> <p>User Identification code is created when signing in with firebase. This is then used to create an user in the 88 Days database and used to get full details</p> <p><strong>Username</strong></p> <p>Is created when making user.<br>- Cannot be changed<br>- Unique</p> <p>&nbsp;</p>'
  contact:
    email: info@88-days.com
  version: 1.0.0
servers:
  - url: 'http://51.68.191.51:2000/v1'
  - url: developer.88-days.com/v1
    description: Use this in app
tags:
  - name: General
  - name: User
  - name: Days
  - name: Search
  - name: Feed
  - name: Map places
paths:
  /user/create:
    post:
      tags:
        - User
      summary: Create a new user
      operationId: create new user
      requestBody:
        description: New user
        content:
          application/json:
            schema:
              required:
                - username
                - name
                - pictureID
                - country
              type: object
              properties:
                uid:
                  type: string
                  example: fdsaHhJHfd8742GFSYF0fdsh
                name:
                  type: string
                  example: Willem de Vries
                username:
                  type: string
                  example: willemjan08
                pictureID:
                  type: string
                  example: HJfdkifwe9324bnfKhfs?fjds834JJDhfi
                email:
                  type: string
                  example: willemjan@gmail.com
                phone:
                  type: string
                  example: 440837162
                country:
                  type: string
                  example: NL
      responses:
        '200':
          description: Could not create User
          content:
            application/json:
              schema:
                type: string
                example: Username already taken
        '201':
          description: User Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      x-codegen-request-body-name: body
  '/user/update/{UID}':
    post:
      tags:
        - User
      summary: Update user info
      description: Updates the current info for user **Provide at least one value in body**
      operationId: update User
      parameters:
        - name: UID
          in: path
          description: User identification number
          required: true
          schema:
            type: string
      requestBody:
        description: Values to update
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Willem jan
                bio:
                  type: string
                  example: This is my new bio
                pictureID:
                  type: string
                  example: dfdsaffFdsf8FD789fjXfdsRvds
                token:
                  type: string
                  example: GdTasGdfysa5432Kvcyderw
                country:
                  type: string
                  example: NL
        required: false
      responses:
        '200':
          description: Updated user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found for UID
          content: {}
        '405':
          description: Validation exception empty body
          content: {}
      x-codegen-request-body-name: body
  '/user/exists/{UID}':
    get:
      tags:
        - User
      summary: Check if user exists for given UID
      parameters:
        - name: UID
          in: path
          description: User identification number
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              example:
                exists: true
  '/user/get/{myUID}/{UID}':
    get:
      tags:
        - User
      summary: Get user for given UID
      parameters:
        - name: myUID
          in: path
          description: Your user identification number
          required: true
          schema:
            type: string
        - name: UID
          in: path
          description: User identification number of requested user
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content: {}
components:
  schemas:
    Error:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string
    User:
      type: object
      properties:
        uid:
          type: string
          example: Jfdksofhs432ujf08Hf83n9fdsMh
        name:
          type: string
          example: Willem de vries
        username:
          type: string
          example: willemdevries08
        pictureID:
          type: string
          example: hfHhfdiuHH843nHfhfHHfdjsj
        email:
          type: string
          example: willemdevries@gmail.com
        phone:
          type: string
          example: 0440763928E8
        bio:
          type: string
          example: This is an example biography
          default: ''
        lastOnline:
          type: string
          format: date-time
          example: '2019-12-27T12:14:42Z'
        country:
          type: string
          example: NL
        signupDate:
          type: string
          description: Generated when user is created
          format: date-time
          example: '2019-12-27T12:14:42Z'
        num_days:
          type: integer
          description: Number of days left for user to work
          example: 64
        followers:
          type: array
          example:
            - fjdsajfidshfj43hHJFYUDS
            - FDJS7432jdfgFfdsj9JhfdhskJ
          items:
            type: string
        following:
          type: array
          example:
            - fjdsajfidshfj43hHJFYUDS
            - FDJS7432jdfgFfdsj9JhfdhskJ
          items:
            type: string
        friendshipState:
          type: integer
          description: |
            enum:
              * `0` - NONE
              
              * `1` - OUTGOING
              
              * `2` - INCOMING
              
              * `3` - MUTUAL
        token:
          type: string
          example: Jjfdsh7r3284bjfsy?r289<gds9f203f
    Users:
      type: array
      items:
        $ref: '#/components/schemas/User'
