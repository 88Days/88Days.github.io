{
  "openapi": "3.0.1",
  "info": {
    "title": "88 Days API",
    "description": "<h2>Authorizations</h2> <p>Access to the API is managed using Authorization headers</p> <p><strong>Development URL:</strong></p> <blockquote> <p><code>https://api.88-days.com/dev/</code></p> </blockquote> <p><strong>Production URL:</strong></p> <blockquote> <p><code>https://api.88-days.com/v1/</code></p> </blockquote> <p><strong>Login</strong></p> <p>Use Firebase to login user<br>- Email<br>- Phone number</p> <p><a href=https://firebase.google.com/docs>Firebase Documentation</a></p> <p><strong>UID</strong></p> <p>User Identification code is created when signing in with firebase. This is then used to create an user in the 88 Days database and used to get full details</p>",
    "contact": {
      "email": "info@88-days.com"
    },
    "version": "1.0.1"
  },
  "servers": [
    {
      "url": "http://api.88-days.com:2000/v1",
      "description": "Production"
    },
    {
      "url": "http://api.88-days.com:8000/dev",
      "description": "Development"
    }
  ],
  "tags": [
    {
      "name": "General"
    },
    {
      "name": "User"
    },
    {
      "name": "Search"
    },
    {
      "name": "Feed"
    },
    {
      "name": "Map places"
    }
  ],
  "paths": {
    "/user/newUser": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Create a new user",
        "operationId": "create new user",
        "requestBody": {
          "description": "New user",
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "uid",
                  "name",
                  "username",
                  "pictureID",
                  "country"
                ],
                "type": "object",
                "properties": {
                  "uid": {
                    "type": "string",
                    "example": "fdsaHhJHfd8742GFSYF0fdsh"
                  },
                  "name": {
                    "type": "string",
                    "example": "Willem de Vries"
                  },
                  "username": {
                    "type": "string",
                    "example": "willemjan08"
                  },
                  "email": {
                    "type": "string",
                    "example": "willemjan@gmail.com (optional)"
                  },
                  "phone": {
                    "type": "string",
                    "example": "+310837162E8 (optional)"
                  },
                  "country": {
                    "type": "string",
                    "example": "NL"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Me"
                }
              }
            }
          },
          "409": {
            "description": "Error creating new user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "Username already in use"
                }
              }
            }
          }
        }
      }
    },
    "/user/follow/{UID}": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Follow user",
        "description": "Follow user for given ID and current friendshipstate",
        "parameters": [
          {
            "name": "UID",
            "in": "path",
            "description": "User identification number of user to follow",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "state": {
                    "type": "integer",
                    "example": 2,
                    "description": "current friendshipstate"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchUser"
                }
              }
            }
          },
          "404": {
            "description": "Could not get followers"
          }
        }
      }
    },
    "/user/lastOnline": {
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Update last online",
        "description": "Updates last online date for user",
        "operationId": "update users last online date",
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "User not found for UID"
          }
        }
      }
    },
    "/user/update": {
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Update user info",
        "description": "Updates the current info for user **Provide at least one value in body**",
        "operationId": "update User",
        "requestBody": {
          "description": "Values to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "Willem jan"
                  },
                  "bio": {
                    "type": "string",
                    "example": "This is my new bio"
                  },
                  "daysWorked": {
                    "type": "string",
                    "example": "8"
                  },
                  "country": {
                    "type": "string",
                    "example": "NL"
                  }
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Updated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "User not found for UID",
            "content": {}
          },
          "405": {
            "description": "Validation exception empty body",
            "content": {}
          }
        }
      }
    },
    "/user/exists": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Check if user exists for given UID",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "example": {
                  "exists": true
                }
              }
            }
          }
        }
      }
    },
    "/user/get/{UID}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get user for given UID",
        "parameters": [
          {
            "name": "UID",
            "in": "path",
            "description": "User identification number of requested user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {}
          }
        }
      }
    },
    "/user/getMe": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get logged in user",
        "description": "<strong>Note</strong>  When retrieving user the value friendshipStatus will not be returned in this call",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Me"
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/user/followers/{UID}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get user followers",
        "description": "Retrieve a list of followers",
        "parameters": [
          {
            "name": "UID",
            "in": "path",
            "description": "User identification number of requested users followers",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchUser"
                }
              }
            }
          },
          "404": {
            "description": "Could not get followers"
          }
        }
      }
    },
    "/user/following/{UID}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get user following",
        "description": "Retrieve a list of following users",
        "parameters": [
          {
            "name": "UID",
            "in": "path",
            "description": "User identification number of requested users following",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchUser"
                }
              }
            }
          },
          "404": {
            "description": "Could not get followers"
          }
        }
      }
    },
    "/search/users": {
      "get": {
        "tags": [
          "Search"
        ],
        "parameters": [
          {
            "name": "searchterm",
            "in": "query",
            "description": "name or username",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "summary": "Search for users",
        "description": "Returns a list of users for given searchterm.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SearchUser"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Could not find any users",
            "content": {}
          }
        }
      }
    },
    "/suggested/users": {
      "get": {
        "tags": [
          "Search"
        ],
        "summary": "Get suggested users",
        "description": "Returns a list of 5 newest users and 5 other users",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "latest": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/SearchUser"
                      }
                    },
                    "random": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/SearchUser"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Could not find any users",
            "content": {}
          }
        }
      }
    },
    "/recommended/users/:offset": {
      "get": {
        "tags": [
          "Search"
        ],
        "summary": "Get recommended users",
        "description": "Returns a list of 8 (limit) users which are recommended for logged in user",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Paging offset",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MutualUser"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Could not find any users",
            "content": {}
          }
        }
      }
    },
    "/mapPlaces": {
      "get": {
        "tags": [
          "Map places"
        ],
        "summary": "Get all map places",
        "description": "Returns an array of all map places",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MapPlace"
                  }
                }
              }
            }
          },
          "405": {
            "description": "Could not retrieve places",
            "content": {}
          }
        }
      }
    },
    "/image/{id}": {
      "delete": {
        "tags": [
          "General"
        ],
        "summary": "Delete an image",
        "description": "Deletes an image for given ID from firebase",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "imageID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "MapPlace": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "bundaberg backpackers"
          },
          "id": {
            "type": "string",
            "example": "fdshOHSfsdoafasLkfs"
          },
          "type": {
            "enum": [
              "working_hostel",
              "workplace",
              "hostel"
            ],
            "example": "workplace"
          },
          "adress": {
            "type": "string",
            "example": "432 Brunswickstreet, QLD Australia"
          },
          "pictures": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "bundaberg_backpackers0",
              "bundaberg_backpackers1"
            ]
          },
          "phone": {
            "type": "string",
            "example": "0448920149"
          },
          "latitude": {
            "type": "number",
            "example": 123.3291844
          },
          "longitude": {
            "type": "number",
            "example": 89.32948013
          },
          "ratingCount": {
            "type": "integer",
            "example": 32
          },
          "ratingTotal": {
            "type": "number",
            "example": 34.84
          },
          "bookingURL": {
            "type": "string"
          },
          "websiteURL": {
            "type": "string"
          },
          "about": {
            "type": "string",
            "example": "Featuring an on-site bar, this central Brisbane hostel is situated just a short stroll from Queen Street Mall and St John's Cathedral. It is close to Brisbane City Hall, dining options and shops. Nomads Brisbane Hostel features a 24-hour reception, plus free Wi-Fi and luggage storage. For added convenience, it offers a shared kitchen, a tour desk and a BBQ/picnic area. Nomads Brisbane Hostel has 124 comfortable rooms that are ideal for travellers on a budget. Nomads Brisbane Hostel provides a conveniently located on-site café. Nomads Brisbane Hostel is conveniently situated for sightseeing in Brisbane with Treasury Casino within a 10-minute walk. Guests can also visit the City Botanic Gardens and Roma Street Parkland."
          }
        }
      },
      "SearchUser": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "willem hendriks"
          },
          "username": {
            "type": "string",
            "example": "willempie88"
          },
          "uid": {
            "type": "string",
            "example": "hfdaorewfioyhoHUJKgyeworjso9as"
          },
          "friendshipState": {
            "enum": [
              0,
              1,
              2,
              3
            ],
            "example": 0,
            "description": "\n  * `0` - NONE (users have no relation)\n  \n  * `1` - OUTGOING (you are following this user)\n  \n  * `2` - INCOMING (user is following you)\n  \n  * `3` - MUTUAL (you follow each other)\n"
          },
          "blocked": {
            "type": "boolean",
            "example": false
          }
        }
      },
      "MutualUser": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "willem hendriks"
          },
          "username": {
            "type": "string",
            "example": "willempie88"
          },
          "uid": {
            "type": "string",
            "example": "hfdaorewfioyhoHUJKgyeworjso9as"
          },
          "friendshipState": {
            "enum": [
              0,
              1,
              2,
              3
            ],
            "example": 0,
            "description": "\n  * `0` - NONE (users have no relation)\n  \n  * `1` - OUTGOING (you are following this user)\n  \n  * `2` - INCOMING (user is following you)\n  \n  * `3` - MUTUAL (you follow each other)\n"
          },
          "blocked": {
            "type": "boolean",
            "example": false
          },
          "mutualFollowers": {
            "type": "integer",
            "example": 4
          }
        }
      },
      "Me": {
        "type": "object",
        "properties": {
          "uid": {
            "type": "string",
            "example": "Jfdksofhs432ujf08Hf83n9fdsMh"
          },
          "name": {
            "type": "string",
            "example": "Willem de vries"
          },
          "username": {
            "type": "string",
            "example": "willemdevries08"
          },
          "email": {
            "type": "string",
            "example": "willemdevries@gmail.com"
          },
          "phone": {
            "type": "string",
            "example": "0440763928E8"
          },
          "bio": {
            "type": "string",
            "example": "This is an example biography",
            "default": ""
          },
          "lastOnline": {
            "type": "string",
            "format": "date-time",
            "example": "2019-12-27T12:14:42Z"
          },
          "country": {
            "type": "string",
            "example": "NL"
          },
          "signupDate": {
            "type": "string",
            "description": "Generated when user is created",
            "format": "date-time",
            "example": "2019-12-27T12:14:42Z"
          },
          "followers_count": {
            "type": "integer",
            "example": 24
          },
          "following_count": {
            "type": "integer",
            "example": 28
          },
          "daysWorked": {
            "type": "integer",
            "example": 4
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "uid": {
            "type": "string",
            "example": "Jfdksofhs432ujf08Hf83n9fdsMh"
          },
          "name": {
            "type": "string",
            "example": "Willem de vries"
          },
          "username": {
            "type": "string",
            "example": "willemdevries08"
          },
          "email": {
            "type": "string",
            "example": "willemdevries@gmail.com"
          },
          "phone": {
            "type": "string",
            "example": "0440763928E8"
          },
          "bio": {
            "type": "string",
            "example": "This is an example biography",
            "default": ""
          },
          "lastOnline": {
            "type": "string",
            "format": "date-time",
            "example": "2019-12-27T12:14:42Z"
          },
          "country": {
            "type": "string",
            "example": "NL"
          },
          "signupDate": {
            "type": "string",
            "description": "Generated when user is created",
            "format": "date-time",
            "example": "2019-12-27T12:14:42Z"
          },
          "followers_count": {
            "type": "integer",
            "example": 24
          },
          "following_count": {
            "type": "integer",
            "example": 28
          },
          "daysWorked": {
            "type": "integer",
            "example": 4
          },
          "isBlocked": {
            "type": "boolean",
            "example": true
          },
          "friendshipState": {
            "enum": [
              0,
              1,
              2,
              3
            ],
            "example": 0,
            "description": "\n  * `0` - NONE (users have no relation)\n  \n  * `1` - OUTGOING (you are following this user)\n  \n  * `2` - INCOMING (user is following you)\n  \n  * `3` - MUTUAL (you follow each other)\n"
          }
        }
      },
      "SearchUsers": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/SearchUser"
        }
      }
    }
  }
}
